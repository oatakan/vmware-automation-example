---
- name: clone template and customize
  vmware_guest:
    hostname: "{{ lookup('env', 'VMWARE_HOST') }}"
    username: "{{ lookup('env', 'VMWARE_USER') }}"
    password: "{{ lookup('env', 'VMWARE_PASSWORD') }}"
    validate_certs: no
    datacenter: "{{ datacenter }}"
    cluster: "{{ cluster }}"
    name: "dc-{{ project_name }}-{{ item.0 }}"
    template: "{{ item.1.template }}"
    state: poweredon
    wait_for_ip_address: yes
    disk: "{{ item.1.disk|default(omit) }}"
    hardware:
      memory_mb: "{{ item.1.memory }}"
      num_cpus: "{{ item.1.cpu }}"
      scsi: paravirtual
    networks:
    - name: "{{ network_name }}"
      ip: "{{ ip_address }}"
      netmask: "{{ netmask }}"
      gateway: "{{ gateway }}"
      domain: "{{ domain_name }}"
      dns_servers: "{{ dns_servers }}"
    customization: "{{ item.customization|default(omit) }}"
  async: 7200
  poll: 0
  register: deploy
  loop: "{{ nodes }}"
  when: nodes is defined

- name: wait for instance creation to complete
  async_status:
    jid: "{{ item.ansible_job_id }}"
  register: instances
  until: instances.finished
  retries: "{{ instance_wait_retry_limit }}"
  delay: 10
  loop: "{{ deploy.results }}"

- name: add custom attributes
  vmware_guest_custom_attributes:
    hostname: "{{ lookup('env', 'VMWARE_HOST') }}"
    username: "{{ lookup('env', 'VMWARE_USER') }}"
    password: "{{ lookup('env', 'VMWARE_PASSWORD') }}"
    name: "{{ item.instance.hw_name }}"
    state: present
    attributes:
      - name: app_name
        value: "{{ project_name | default('') }}"
      - name: role
        value: "{{ server_role | default('') }}"
  loop: "{{ instances.results }}"
  when:
    - instances is defined
    - item.instance is defined
  ignore_errors: yes

- debug:
    var: item.item.item.networks[0].ip | default(item.instance.ipv4)
  loop: "{{ instances.results }}"

- name: waiting for servers to come online
  wait_for:
    host: "{{ item.item.item.networks[0].ip | default(item.instance.ipv4) }}"
    port: "{{ item.item.item.ansible_port | default(ansible_port) | default('22') }}"
    timeout: "{{ instance_wait_connection_timeout }}"
  loop: "{{ instances.results }}"
  when:
    - instances is defined
    - item.instance is defined
  ignore_errors: yes